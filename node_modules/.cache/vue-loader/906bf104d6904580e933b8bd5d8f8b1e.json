{"remainingRequest":"/home/sslye/Workspace/DAAAAR/tourist-Unesco/daar3_cv/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sslye/Workspace/DAAAAR/tourist-Unesco/daar3_cv/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/sslye/Workspace/DAAAAR/tourist-Unesco/daar3_cv/src/App.vue","mtime":1607350186324},{"path":"/home/sslye/Workspace/DAAAAR/tourist-Unesco/daar3_cv/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sslye/Workspace/DAAAAR/tourist-Unesco/daar3_cv/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/sslye/Workspace/DAAAAR/tourist-Unesco/daar3_cv/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/sslye/Workspace/DAAAAR/tourist-Unesco/daar3_cv/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sslye/Workspace/DAAAAR/tourist-Unesco/daar3_cv/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNhcHAgewogIGZvbnQtZmFtaWx5OiBBdmVuaXIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7CiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgY29sb3I6ICMyYzNlNTA7CiAgbWFyZ2luLXRvcDogNjBweDsKfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"container\">\n      <!--UPLOAD-->\n      <form enctype=\"multipart/form-data\" novalidate v-if=\"isInitial || isSaving\">\n        <h1>Soumission d'un CV</h1>\n        <div class=\"dropbox\">\n          <p>\n            NOM \n          </p>\n          <p> \n            <input type=\"text\" name=\"nom\" ref=\"nom\" />\n          </p>\n          <p>\n            Prénom  \n          </p>\n          <p> \n            <input type=\"text\" name=\"prenom\" ref=\"prenom\" />\n          </p>\n          <input type=\"file\" multiple  :name=\"uploadFieldName\" :disabled=\"isSaving\" @change=\"filesChange($event.target.name, $event.target.files); fileCount = $event.target.files.length\"\n            accept=\".pdf, .doc, .docx, image/*\" class=\"input-file\">\n            <p v-if=\"isInitial\">\n              Déposez votre CV <br> ou cliquez pour selectionner\n            </p>\n            <p v-if=\"isSaving\">\n              Uploading {{ fileCount }} files...\n            </p>\n        </div>\n      </form>\n\n      <!-- UPLOAD2 -->\n      <!--\n      <div class=\"container\">\n        <div class=\"large-12 medium-12 small-12 cell\">\n          <label>File\n            <input type=\"file\" id=\"file\" ref=\"file\" v-on:change=\"handleFileUpload()\"/>\n          </label>\n            <button v-on:click=\"submitFile()\">Submit</button>\n        </div>\n      </div>\n      -->\n      \n      <!-- multiple -->\n      <!--SUCCESS-->\n      <div v-if=\"isSuccess\">\n        <h2>Uploaded {{ uploadedFiles.length }} file(s) successfully.</h2>\n        <p>\n          <a href=\"javascript:void(0)\" @click=\"reset()\">Upload again</a>\n        </p>\n        <ul class=\"list-unstyled\">\n          <li v-for = \"item in uploadedFiles\" :key = item.url>  <!-- Attention: Peut ne pas marcher  -->\n            <img :src=\"item.url\" class=\"img-responsive img-thumbnail\" :alt=\"item.originalName\">\n          </li>\n        </ul>\n        <!-- Ici a été supprimé du code  -->\n        \n      </div>\n      <!--FAILED-->\n      <div v-if=\"isFailed\">\n        <h2>Uploaded failed.</h2>\n        <p>\n          <a href=\"javascript:void(0)\" @click=\"reset()\">Nouvel essai</a>\n        </p>\n        <pre>{{ uploadError }}</pre>\n      </div>\n\n      <!--Recherche OK -->\n      <div v-if=\"isRecherche\">\n        <h2>Recherche effectuée.</h2>\n        <p>\n          <a href=\"javascript:void(0)\" @click=\"reset()\">Nouvelle Recherche</a>\n        </p>\n         <div>\n             <div v-for=\"(p, id) in result\" :key=\"`p-${id}`\" style=\"background: cyan; margin: 5px;\">\n               <h5>{{ p.prenom }} {{ p.nom }}</h5>\n               <p>Tel: {{ p.tel }}</p>\n               <p>Mail: <a v-bind:href=\"'mailto:' + p.mail\">{{ p.mail }}</a></p>\n               <p>Git: <a v-bind:href=\"'https://' + p.git\">{{ p.git }}</a></p>\n             </div>\n           </div>\n      </div>\n\n      <form v-on:submit.prevent=\"requete\" >\n        <h1>Recherche des CV ayant les compétences suivante:</h1>\n        <input type=\"text\" name=\"qwery\" ref=\"query\" v-on:change=\"requete()\" />\n        <input type=\"submit\" value=\"Recherche\" />\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { upload } from './service.js'; //real service\n  import { queryf } from './service.js'; //real service\n  //import { queryf } from './fake_service2.js'; // fake service\n  //import { upload } from './fake_service.js'; // fake service\n  //import * as axios from 'axios';\n\n  const STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_SUCCESS = 2, STATUS_FAILED = 3, STATUS_RECHERCHE = 4;\n\n  export default {\n\n    //submit files\n\n    name: 'app',\n    data() {\n      return {\n        file:'',\n        result:null,\n        prenom:null,\n        nom: null,\n        query: null,\n        uploadedFiles: [],\n        uploadError: null,\n        currentStatus: null,\n        uploadFieldName: 'photos'\n      }\n    },\n    computed: {\n      isInitial() {\n        return this.currentStatus === STATUS_INITIAL;\n      },\n      isSaving() {\n        return this.currentStatus === STATUS_SAVING;\n      },\n      isSuccess() {\n        return this.currentStatus === STATUS_SUCCESS;\n      },\n      isFailed() {\n        return this.currentStatus === STATUS_FAILED;\n      },\n      isRecherche() {\n        return this.currentStatus === STATUS_RECHERCHE;\n      }\n    },\n    methods: {  \n\n      /*submitFile(){\n        let formData = new FormData();\n        formData.append('file', this.file);\n        axios.post( 'http://localhost:8080/upload',\n        formData,\n                {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n              }\n        ).then(function(){\n        console.log('SUCCESS!!');\n        })\n        .catch(function(){\n          console.log('FAILURE!!');\n        });\n      },\n      */\n      /*\n        Handles a change on the file upload\n      */\n      /*\n      handleFileUpload(){\n        this.file = this.$refs.file.files[0];\n      },\n      */\n\n      requete() {\n        this.query = this.$refs.query.value;\n        const arg = this.query;\n        queryf(arg)\n        .then(x => {\n          //this.result = x; //Liste ici\n          //console.log(\"debug\")\n          //console.log(\"x = \" + x); // x = [object Object],[object Object]\n\n          this.result = x.data;\n          //console.log(\"result = \" + this.result); // result = undefined\n          //alert(this.result);\n          //alert(this.result.prenom);\n\n          this.currentStatus = STATUS_RECHERCHE;\n        })\n        .catch((err) => {\n    if (err.response) {\n      console.log(\"ERREUR GET :\");\n      console.log(\">> \" + err.response.data);\n      console.log(\">> \" + err.response.status);\n      console.log(\">> \" + err.response.headers);\n      this.uploadError = err.response;\n      this.currentStatus = STATUS_FAILED;\n    }\n  })\n      },\n\n      resToString(l) {\n                  let res = \"\";\n                  l.forEach((p) => {\n                    res += p.prenom + \" \"+ p.nom + \" Tel : \" + p.tel + \" Mail : \" + p.mail + \" Git : \" + p.git;\n                  });\n                  return res;\n                },\n\n      reset() {\n        // reset form to initial state\n        this.currentStatus = STATUS_INITIAL;\n        this.result = null;\n        this.prenom = null;\n        this.nom = null;\n        this.uploadedFiles = [];\n        this.uploadError = null;\n      },\n      save(formData) {\n        // upload data to the server\n        this.currentStatus = STATUS_SAVING;\n\n        upload(formData)\n          .then(x => {\n            this.uploadedFiles = [].concat(x);\n            this.currentStatus = STATUS_SUCCESS;\n          })\n          .catch(err => {\n            this.uploadError = err.response;\n            this.currentStatus = STATUS_FAILED;\n          });\n      },\n      filesChange(fieldName, fileList) {\n        // handle file changes\n        const formData = new FormData();\n        \n\n        if (!fileList.length) return;\n\n        // append the files to FormData\n        Array\n          .from(Array(fileList.length).keys())\n          .map(x => {\n            this.nom = this.$refs.nom.value.toUpperCase();\n            this.prenom = this.$refs.prenom.value.toLowerCase().replace(/^\\w/, (c) => c.toUpperCase());\n            //alert (this.nom);\n            //alert(fileList[x].name); //Ici changer valeur\n            let parts = fileList[x].name.split('.');\n            let extension = parts[parts.length -1 ];\n            //alert(parts);\n            formData.append(fieldName, fileList[x], (this.nom + \"_\" + this.prenom + \".\" + extension));\n          });\n\n        // save it\n        this.save(formData);\n      }\n    },\n    mounted() {\n      this.reset();\n    },\n  }\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]}]}